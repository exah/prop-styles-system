hljs:
  highlightAuto: true
  languages:
    - css
    - js
toc:
  - name: Creating Prop Styles and Theme
    children:
      - createPropStyles
      - createTheme
      - name: Types
        children:
          - PropStylesObj
          - PropStyleFn
  - name: Space
    description: |
      Consistent `space` system for setting `margin` or `padding`.

      - If value is a `Number` it takes value from `theme.space` `Array` by index
      - Negative value for negative margins
      - If value is a `String` it passed as raw CSS value (like `'10%'` or `'100vh'`)
      - `true` value is equal to `1` index in space `Array`
      - `false` value is equal to `0` index in space `Array`

      All examples use this [`theme`](#createtheme):

      ```js
      const theme = createTheme({
        media: {
          M: `(max-width: 600px)`
        },
        space: {
          default: [ 0, 10, 20, 40, 80 ],
          M: [ 0, 8, 16, 32, 64 ],
        }
      })
      ```

    children:
      - spacePropStyles
      - name: Utils
        children:
          - createSpaceProps
          - createSpaceStyle

  - name: Sizes
    description: |
      Consistent `sizes` system for `width`, `height` and any other related props (even for position).

      **`String` values:**

      - Get value by path in `theme.size` or in top level `theme` object
      - If value in `theme.sizes` is an `Object` with media keys (like in `theme.media`) value is responsive
      - Other `String` values is passed as raw CSS value (like `'10%'` or `'100vh'`).

      **`Number` values:**

      - From 0-1 it is converted to percentage widths
      - Greater than 1 are converted to pixel values.

      All examples use this [`theme`](#createtheme):

      ```js
      const theme = createTheme({
        media: {
          M: `(max-width: 600px)`
        },
        size: {
          small: '10px',
          medium: '20px',
          block: {
            default: '500px',
            M: '300px'
          }
        },
        site: {
          width: '1300px'
        }
      })
      ```
    children:
      - sizePropsStyles
      - name: Utils
        children:
          - sizeProp

  - name: Colors
    description: |
      Prop styles for getting current `palette` or `color` value from `theme`.

      Result can be changed in nested components with setting other key in `theme.default.palette`.

      All examples use this [`theme`](#createtheme):

      ```js
      const theme = createTheme({
        default: {
          palette: 'default' // this can be changed
        },
        color: {
          red: '#ff0000',
          black: '#222222',
          white: '#ffffff'
        },
        palette: {
          default: { // currently active
            bg: '#ffffff',
            fg: '#222222',
            accent: '#ff0000',
            shadow: 'rgba(0, 0, 0, 0.2)'
          },
          inverted: {
            bg: '#222222',
            fg: '#ffffff',
            accent: '#ff0000'
          }
        }
      })
    children:
      - colorsPropStyles
      - name: Utils
        children:
          - colorProp
          - themeProp

  - name: Styles in Theme
    children:
      - propStylesInTheme

  - name: Misc
    children:
      - cssProp
      - propSelector
      - combineSelectors
